<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>详解20道Redis经典面试题</title>
    <url>/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="什么是Redis？它主要用来什么的？"><a href="#什么是Redis？它主要用来什么的？" class="headerlink" title="什么是Redis？它主要用来什么的？"></a>什么是Redis？它主要用来什么的？</h1><p>Redis，英文全称是<strong>Remote Dictionary Server</strong>（远程字典服务），是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>与MySQL数据库不同的是，Redis的数据是存在内存中的。它的读写速度非常快，每秒可以处理超过10万次读写操作。<span id="more"></span><!--more-->因此redis被<strong>广泛应用于缓存</strong>，另外，Redis也经常用来做分布式锁。除此之外，Redis支持事务、持久化、LUA 脚本、LRU 驱动事件、多种集群方案。</p>
<h1 id="说说Redis的基本数据结构类型"><a href="#说说Redis的基本数据结构类型" class="headerlink" title="说说Redis的基本数据结构类型"></a>说说Redis的基本数据结构类型</h1><p>大多数小伙伴都知道，Redis有以下这五种基本类型：</p>
<ul>
<li>String（字符串）</li>
<li>Hash（哈希）</li>
<li>List（列表）</li>
<li>Set（集合）</li>
<li>zset（有序集合）</li>
</ul>
<p>它还有三种特殊的数据结构类型</p>
<ul>
<li>Geospatial</li>
<li>Hyperloglog</li>
<li>Bitmap</li>
</ul>
<h2 id="Redis-的五种基本数据类型"><a href="#Redis-的五种基本数据类型" class="headerlink" title="Redis 的五种基本数据类型"></a>Redis 的五种基本数据类型</h2><p>![Redis 的五种基本数据类型](详解20道Redis经典面试题/Redis 的五种基本数据类型.png)</p>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><ul>
<li>简介:String是Redis最基础的数据结构类型，它是二进制安全的，可以存储图片或者序列化的对象，值最大存储为512M</li>
<li>简单使用举例: <code>set key value</code>、<code>get key</code>等</li>
<li>应用场景：共享session、分布式锁，计数器、限流。</li>
<li>内部编码有3种，<code>int（8字节长整型）/embstr（小于等于39字节字符串）/raw（大于39个字节字符串）</code></li>
</ul>
<p>C语言的字符串是<code>char[]</code>实现的，而Redis使用<strong>SDS（simple dynamic string）</strong> 封装，sds源码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct sdshdr&#123;</span><br><span class="line">  unsigned int len; // 标记buf的长度</span><br><span class="line">  unsigned int free; //标记buf中未使用的元素个数</span><br><span class="line">  char buf[]; // 存放元素的坑</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>SDS 结构图如下：</p>
<p>![SDS 结构图](详解20道Redis经典面试题/SDS 结构图.png)</p>
<p>Redis为什么选择<strong>SDS</strong>结构，而C语言原生的<code> char[]</code>不香吗？</p>
<blockquote>
<p>举例其中一点，SDS中，O(1)时间复杂度，就可以获取字符串长度；而C 字符串，需要遍历整个字符串，时间复杂度为O(n)</p>
</blockquote>
<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><ul>
<li>简介：在Redis中，哈希类型是指v（值）本身又是一个键值对（k-v）结构</li>
<li>简单使用举例：<code>hset key field value</code> 、<code>hget key field</code></li>
<li>内部编码：<code>ziplist（压缩列表）</code> 、<code>hashtable（哈希表）</code></li>
<li>应用场景：缓存用户信息等。</li>
<li><strong>注意点</strong>：如果开发使用hgetall，哈希元素比较多的话，可能导致Redis阻塞，可以使用hscan。而如果只是获取部分field，建议使用hmget。</li>
</ul>
<p>字符串和哈希类型对比如下图：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%93%88%E5%B8%8C%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="字符串和哈希类型对比图"></p>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><ul>
<li>简介：列表（list）类型是用来存储多个有序的字符串，一个列表最多可以存储2^32-1个元素。</li>
<li>简单实用举例：<code> lpush  key  value [value ...]</code> 、<code>lrange key start end</code></li>
<li>内部编码：ziplist（压缩列表）、linkedlist（链表）</li>
<li>应用场景： 消息队列，文章列表,</li>
</ul>
<p>一图看懂list类型的插入与弹出：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/list.png" alt="list"></p>
<p>list应用场景参考以下：</p>
<blockquote>
<ul>
<li>lpush+lpop=Stack（栈）</li>
<li>lpush+rpop=Queue（队列）</li>
<li>lpsh+ltrim=Capped Collection（有限集合）</li>
<li>lpush+brpop=Message Queue（消息队列）</li>
</ul>
</blockquote>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/Set.png" alt="Set"></p>
<ul>
<li>简介：集合（set）类型也是用来保存多个的字符串元素，但是不允许重复元素</li>
<li>简单使用举例：<code>sadd key element [element ...]</code>、<code>smembers key</code></li>
<li>内部编码：<code>intset（整数集合）</code>、<code>hashtable（哈希表）</code></li>
<li><strong>注意点</strong>：smembers和lrange、hgetall都属于比较重的命令，如果元素过多存在阻塞Redis的可能性，可以使用sscan来完成。</li>
<li>应用场景： 用户标签,生成随机数抽奖、社交需求。</li>
</ul>
<h4 id="有序集合（zset）"><a href="#有序集合（zset）" class="headerlink" title="有序集合（zset）"></a>有序集合（zset）</h4><ul>
<li>简介：已排序的字符串集合，同时元素不能重复</li>
<li>简单格式举例：<code>zadd key score member [score member ...]</code>，<code>zrank key member</code></li>
<li>底层内部编码：<code>ziplist（压缩列表）</code>、<code>skiplist（跳跃表）</code></li>
<li>应用场景：排行榜，社交需求（如用户点赞）。</li>
</ul>
<p>Redis 的三种特殊数据类型</p>
<ul>
<li>Geo：Redis3.2推出的，地理位置定位，用于存储地理位置信息，并对存储的信息进行操作。</li>
<li>HyperLogLog：用来做基数统计算法的数据结构，如统计网站的UV。</li>
<li>Bitmaps ：用一个比特位来映射某个元素的状态，在Redis中，它的底层是基于字符串类型实现的，可以把bitmaps成作一个以比特位为单位的数组</li>
</ul>
<h1 id="Redis为什么这么快？"><a href="#Redis为什么这么快？" class="headerlink" title="Redis为什么这么快？"></a>Redis为什么这么快？</h1><p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB.png" alt="Redis为什么这么快"></p>
<h2 id="基于内存存储实现"><a href="#基于内存存储实现" class="headerlink" title="基于内存存储实现"></a>基于内存存储实现</h2><p>我们都知道内存读写是比在磁盘快很多的，Redis基于内存存储实现的数据库，相对于数据存在磁盘的MySQL数据库，省去磁盘I/O的消耗。</p>
<h2 id="高效的数据结构"><a href="#高效的数据结构" class="headerlink" title="高效的数据结构"></a>高效的数据结构</h2><p>我们知道，Mysql索引为了提高效率，选择了B+树的数据结构。其实合理的数据结构，就是可以让你的应用/程序更快。先看下Redis的数据结构&amp;内部编码图：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="redis的数据结构"></p>
<h4 id="SDS简单动态字符串"><a href="#SDS简单动态字符串" class="headerlink" title="SDS简单动态字符串"></a>SDS简单动态字符串</h4><p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/SDS%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="SDS简单动态字符串"></p>
<blockquote>
<ul>
<li>字符串长度处理：Redis获取字符串长度，时间复杂度为O(1)，而C语言中，需要从头开始遍历，复杂度为O（n）;</li>
<li>空间预分配：字符串修改越频繁的话，内存分配越频繁，就会消耗性能，而SDS修改和空间扩充，会额外分配未使用的空间，减少性能损耗。</li>
<li>惰性空间释放：SDS 缩短时，不是回收多余的内存空间，而是free记录下多余的空间，后续有变更，直接使用free中记录的空间，减少分配。</li>
<li>二进制安全：Redis可以存储一些二进制数据，在C语言中字符串遇到’\0’会结束，而 SDS中标志字符串结束的是len属性。</li>
</ul>
</blockquote>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>Redis 作为 K-V 型内存数据库，所有的键值就是用字典来存储。字典就是哈希表，比如HashMap，通过key就可以直接获取到对应的value。而哈希表的特性，在O（1）时间复杂度就可以获得对应的值。</p>
<h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%B7%B3%E8%B7%83%E8%A1%A8.png" alt="跳跃表"></p>
<blockquote>
<ul>
<li>跳跃表是Redis特有的数据结构，就是在链表的基础上，增加多级索引提升查找效率。</li>
<li>跳跃表支持平均 O（logN）,最坏 O（N）复杂度的节点查找，还可以通过顺序性操作批量处理节点。</li>
</ul>
</blockquote>
<h2 id="合理的数据编码"><a href="#合理的数据编码" class="headerlink" title="合理的数据编码"></a>合理的数据编码</h2><p>Redis 支持多种数据数据类型，每种基本类型，可能对多种数据结构。什么时候,使用什么样数据结构，使用什么样编码，是redis设计者总结优化的结果。</p>
<blockquote>
<ul>
<li>String：如果存储数字的话，是用int类型的编码;如果存储非数字，小于等于39字节的字符串，是embstr；大于39个字节，则是raw编码。</li>
<li>List：如果列表的元素个数小于512个，列表每个元素的值都小于64字节（默认），使用ziplist编码，否则使用linkedlist编码</li>
<li>Hash：哈希类型元素个数小于512个，所有值小于64字节的话，使用ziplist编码,否则使用hashtable编码。</li>
<li>Set：如果集合中的元素都是整数且元素个数小于512个，使用intset编码，否则使用hashtable编码。</li>
<li>Zset：当有序集合的元素个数小于128个，每个元素的值小于64字节时，使用ziplist编码，否则使用skiplist（跳跃表）编码</li>
</ul>
</blockquote>
<h2 id="合理的线程模型"><a href="#合理的线程模型" class="headerlink" title="合理的线程模型"></a>合理的线程模型</h2><p><strong>I/O 多路复用</strong></p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png" alt="多路复用"></p>
<blockquote>
<p>多路I/O复用技术可以让单个线程高效的处理多个连接请求，而Redis使用用epoll作为I/O多路复用技术的实现。并且，Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件，不在网络I/O上浪费过多的时间。</p>
</blockquote>
<p>什么是I/O多路复用？</p>
<blockquote>
<ul>
<li>I/O ：网络 I/O</li>
<li>多路 ：多个网络连接</li>
<li>复用：复用同一个线程。</li>
<li>IO多路复用其实就是一种同步IO模型，它实现了一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；而没有文件句柄就绪时,就会阻塞应用程序，交出cpu。</li>
</ul>
</blockquote>
<p><strong>单线程模型</strong></p>
<ul>
<li>Redis是单线程模型的，而单线程避免了CPU不必要的上下文切换和竞争锁的消耗。也正因为是单线程，如果某个命令执行过长（如hgetall命令），会造成阻塞。Redis是面向快速执行场景的数据库。，所以要慎用如smembers和lrange、hgetall等命令。</li>
<li>Redis 6.0 引入了多线程提速，它的执行命令操作内存的仍然是个单线程。</li>
</ul>
<h2 id="虚拟内存机制"><a href="#虚拟内存机制" class="headerlink" title="虚拟内存机制"></a>虚拟内存机制</h2><p>Redis直接自己构建了VM机制 ，不会像一般的系统会调用系统函数处理，会浪费一定的时间去移动和请求。</p>
<p><strong>Redis的虚拟内存机制是啥呢？</strong></p>
<blockquote>
<p>虚拟内存机制就是暂时把不经常访问的数据(冷数据)从内存交换到磁盘中，从而腾出宝贵的内存空间用于其它需要访问的数据(热数据)。通过VM功能可以实现冷热数据分离，使热数据仍在内存中、冷数据保存到磁盘。这样就可以避免因为内存不足而造成访问速度下降的问题。</p>
</blockquote>
<h1 id="什么是缓存击穿、缓存穿透、缓存雪崩？"><a href="#什么是缓存击穿、缓存穿透、缓存雪崩？" class="headerlink" title="什么是缓存击穿、缓存穿透、缓存雪崩？"></a>什么是缓存击穿、缓存穿透、缓存雪崩？</h1><h2 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h2><p>先来看一个常见的缓存使用方式：读请求来了，先查下缓存，缓存有值命中，就直接返回；缓存没命中，就去查数据库，然后把数据库的值更新到缓存，再返回。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png" alt="常见的缓存使用方式"></p>
<p><strong>缓存穿透</strong>：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。</p>
<blockquote>
<p>通俗点说，读请求访问时，缓存和数据库都没有某个值，这样就会导致每次对这个值的查询请求都会穿透到数据库，这就是缓存穿透。</p>
</blockquote>
<p>缓存穿透一般都是这几种情况产生的：</p>
<ul>
<li><strong>业务不合理的设计</strong>，比如大多数用户都没开守护，但是你的每个请求都去缓存，查询某个userid查询有没有守护。</li>
<li><strong>业务/运维/开发失误的操作</strong>，比如缓存和数据库的数据都被误删除了。</li>
<li><strong>黑客非法请求攻击</strong>，比如黑客故意捏造大量非法请求，以读取不存在的业务数据。</li>
</ul>
<p><strong>如何避免缓存穿透呢？</strong> 一般有三种方法。</p>
<ul>
<li>1.如果是非法请求，我们在API入口，对参数进行校验，过滤非法值。</li>
<li>2.如果查询数据库为空，我们可以给缓存设置个空值，或者默认值。但是如有有写请求进来的话，需要更新缓存哈，以保证缓存一致性，同时，最后给缓存设置适当的过期时间。（业务上比较常用，简单有效）</li>
<li>3.使用布隆过滤器快速判断数据是否存在。即一个查询请求过来时，先通过布隆过滤器判断值是否存在，存在才继续往下查。</li>
</ul>
<blockquote>
<p>布隆过滤器原理：它由初始值为0的位图数组和N个哈希函数组成。一个对一个key进行N个hash算法获取N个值，在比特数组中将这N个值散列后设定为1，然后查的时候如果特定的这几个位置都为1，那么布隆过滤器判断该key存在。</p>
</blockquote>
<h1 id="缓存雪奔问题"><a href="#缓存雪奔问题" class="headerlink" title="缓存雪奔问题"></a>缓存雪奔问题</h1><p><strong>缓存雪奔：</strong> 指缓存中数据大批量到过期时间，而查询数据量巨大，请求都直接访问数据库，引起数据库压力过大甚至down机。</p>
<ul>
<li>缓存雪奔一般是由于大量数据同时过期造成的，对于这个原因，可通过均匀设置过期时间解决，即让过期时间相对离散一点。如采用一个较大固定值+一个较小的随机值，5小时+0到1800秒酱紫。</li>
<li>Redis 故障宕机也可能引起缓存雪奔。这就需要构造Redis高可用集群啦。</li>
</ul>
<h1 id="缓存击穿问题"><a href="#缓存击穿问题" class="headerlink" title="缓存击穿问题"></a>缓存击穿问题</h1><p><strong>缓存击穿：</strong> 指热点key在某个时间点过期的时候，而恰好在这个时间点对这个Key有大量的并发请求过来，从而大量的请求打到db。</p>
<p>缓存击穿看着有点像，其实它两区别是，缓存雪奔是指数据库压力过大甚至down机，缓存击穿只是大量并发请求到了DB数据库层面。可以认为击穿是缓存雪奔的一个子集吧。有些文章认为它俩区别，是区别在于击穿针对某一热点key缓存，雪奔则是很多key。</p>
<p>解决方案就有两种：</p>
<ul>
<li><strong>1.使用互斥锁方案</strong>。缓存失效时，不是立即去加载db数据，而是先使用某些带成功返回的原子操作命令，如(Redis的setnx）去操作，成功的时候，再去加载db数据库数据和设置缓存。否则就去重试获取缓存。</li>
<li><strong>2. “永不过期”</strong>，是指没有设置过期时间，但是热点数据快要过期时，异步线程去更新和设置过期时间。</li>
</ul>
<h1 id="什么是热Key问题，如何解决热key问题"><a href="#什么是热Key问题，如何解决热key问题" class="headerlink" title="什么是热Key问题，如何解决热key问题"></a>什么是热Key问题，如何解决热key问题</h1><p><strong>什么是热Key呢</strong>？在Redis中，我们把访问频率高的key，称为热点key。</p>
<p>如果某一热点key的请求到服务器主机时，由于请求量特别大，可能会导致主机资源不足，甚至宕机，从而影响正常的服务。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis01.png"></p>
<p>而热点Key是怎么产生的呢？主要原因有两个：</p>
<blockquote>
<ul>
<li>用户消费的数据远大于生产的数据，如秒杀、热点新闻等读多写少的场景。</li>
<li>请求分片集中，超过单Redi服务器的性能，比如固定名称key，Hash落入同一台服务器，瞬间访问量极大，超过机器瓶颈，产生热点Key问题。</li>
</ul>
</blockquote>
<p>那么在日常开发中，如何识别到热点key呢？</p>
<blockquote>
<ul>
<li>凭经验判断哪些是热Key；</li>
<li>客户端统计上报；</li>
<li>服务代理层上报</li>
</ul>
</blockquote>
<p>如何解决热key问题？</p>
<blockquote>
<ul>
<li>Redis集群扩容：增加分片副本，均衡读流量；</li>
<li>将热key分散到不同的服务器中；</li>
<li>使用二级缓存，即JVM本地缓存,减少Redis的读请求。</li>
</ul>
</blockquote>
<h1 id="Redis-过期策略和内存淘汰策略"><a href="#Redis-过期策略和内存淘汰策略" class="headerlink" title="Redis 过期策略和内存淘汰策略"></a>Redis 过期策略和内存淘汰策略</h1><p>![Redis 过期策略和内存淘汰策略](详解20道Redis经典面试题/Redis 过期策略和内存淘汰策略.png)</p>
<h2 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略"></a>Redis的过期策略</h2><p>我们在<code>set key</code>的时候，可以给它设置一个过期时间，比如<code>expire key 60</code>。指定这key60s后过期，60s后，redis是如何处理的嘛？我们先来介绍几种过期策略：</p>
<h4 id="定时过期"><a href="#定时过期" class="headerlink" title="定时过期"></a>定时过期</h4><blockquote>
<p>每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即对key进行清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p>
</blockquote>
<h4 id="惰性过期"><a href="#惰性过期" class="headerlink" title="惰性过期"></a>惰性过期</h4><blockquote>
<p>只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p>
</blockquote>
<h4 id="定期过期"><a href="#定期过期" class="headerlink" title="定期过期"></a>定期过期</h4><blockquote>
<p>每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p>
<p>expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。</p>
</blockquote>
<p>Redis中同时使用了<strong>惰性过期和定期过期</strong>两种过期策略。</p>
<ul>
<li>假设Redis当前存放30万个key，并且都设置了过期时间，如果你每隔100ms就去检查这全部的key，CPU负载会特别高，最后可能会挂掉。</li>
<li>因此，redis采取的是定期过期，每隔100ms就随机抽取一定数量的key来检查和删除的。</li>
<li>但是呢，最后可能会有很多已经过期的key没被删除。这时候，redis采用惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且已经过期了，此时就会删除。</li>
</ul>
<p>但是呀，如果定期删除漏掉了很多过期的key，然后也没走惰性删除。就会有很多过期key积在内存内存，直接会导致内存爆的。或者有些时候，业务量大起来了，redis的key被大量使用，内存直接不够了，运维小哥哥也忘记加大内存了。难道redis直接这样挂掉？不会的！Redis用8种内存淘汰策略保护自己~</p>
<h2 id="Redis-内存淘汰策略"><a href="#Redis-内存淘汰策略" class="headerlink" title="Redis 内存淘汰策略"></a>Redis 内存淘汰策略</h2><ul>
<li>volatile-lru：当内存不足以容纳新写入数据时，从设置了过期时间的key中使用LRU（最近最少使用）算法进行淘汰；</li>
<li>allkeys-lru：当内存不足以容纳新写入数据时，从所有key中使用LRU（最近最少使用）算法进行淘汰。</li>
<li>volatile-lfu：4.0版本新增，当内存不足以容纳新写入数据时，在过期的key中，使用LFU算法进行删除key。</li>
<li>allkeys-lfu：4.0版本新增，当内存不足以容纳新写入数据时，从所有key中使用LFU算法进行淘汰；</li>
<li>volatile-random：当内存不足以容纳新写入数据时，从设置了过期时间的key中，随机淘汰数据；。</li>
<li>allkeys-random：当内存不足以容纳新写入数据时，从所有key中随机淘汰数据。</li>
<li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的key中，根据过期时间进行淘汰，越早过期的优先被淘汰；</li>
<li>noeviction：默认策略，当内存不足以容纳新写入数据时，新写入操作会报错。</li>
</ul>
<h1 id="说说Redis的常用应用场景"><a href="#说说Redis的常用应用场景" class="headerlink" title="说说Redis的常用应用场景"></a>说说Redis的常用应用场景</h1><ul>
<li>缓存</li>
<li>排行榜</li>
<li>计数器应用</li>
<li>共享Session</li>
<li>分布式锁</li>
<li>社交网络</li>
<li>消息队列</li>
<li>位操作</li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>我们一提到redis，自然而然就想到缓存，国内外中大型的网站都离不开缓存。合理的利用缓存，比如缓存热点数据，不仅可以提升网站的访问速度，还可以降低数据库DB的压力。并且，Redis相比于memcached，还提供了丰富的数据结构，并且提供RDB和AOF等持久化机制，强的一批。</p>
<h2 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h2><p>当今互联网应用，有各种各样的排行榜，如电商网站的月度销量排行榜、社交APP的礼物排行榜、小程序的投票排行榜等等。Redis提供的<code>zset</code>数据类型能够实现这些复杂的排行榜。</p>
<p>比如，用户每天上传视频，获得点赞的排行榜可以这样设计：</p>
<ul>
<li>1.用户Jay上传一个视频，获得6个赞，可以酱紫：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd user:ranking:2021-03-03 Jay 3</span><br></pre></td></tr></table></figure>

<ul>
<li><ol>
<li>过了一段时间，再获得一个赞，可以这样：</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zincrby user:ranking:2021-03-03 Jay 1</span><br></pre></td></tr></table></figure>

<ul>
<li><ol>
<li>如果某个用户John作弊，需要删除该用户：</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrem user:ranking:2021-03-03 John</span><br></pre></td></tr></table></figure>

<ul>
<li><ol>
<li>展示获取赞数最多的3个用户</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrevrangebyrank user:ranking:2021-03-03 0 2</span><br></pre></td></tr></table></figure>

<h2 id="计数器应用"><a href="#计数器应用" class="headerlink" title="计数器应用"></a>计数器应用</h2><p>各大网站、APP应用经常需要计数器的功能，如短视频的播放数、电商网站的浏览数。这些播放数、浏览数一般要求实时的，每一次播放和浏览都要做加1的操作，如果并发量很大对于传统关系型数据的性能是一种挑战。Redis天然支持计数功能而且计数的性能也非常好，可以说是计数器系统的重要选择。</p>
<h2 id="共享Session"><a href="#共享Session" class="headerlink" title="共享Session"></a>共享Session</h2><p>如果一个分布式Web服务将用户的Session信息保存在各自服务器，用户刷新一次可能就需要重新登录了，这样显然有问题。实际上，可以使用Redis将用户的Session进行集中管理，每次用户更新或者查询登录信息都直接从Redis中集中获取。</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>几乎每个互联网公司中都使用了分布式部署，分布式服务下，就会遇到对同一个资源的并发访问的技术难题，如秒杀、下单减库存等场景。</p>
<ul>
<li>用synchronize或者reentrantlock本地锁肯定是不行的。</li>
<li>如果是并发量不大话，使用数据库的悲观锁、乐观锁来实现没啥问题。</li>
<li>但是在并发量高的场合中，利用数据库锁来控制资源的并发访问，会影响数据库的性能。</li>
<li>实际上，可以用Redis的setnx来实现分布式的锁。</li>
</ul>
<h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p>赞/踩、粉丝、共同好友/喜好、推送、下拉刷新等是社交网站的必备功能，由于社交网站访问量通常比较大，而且传统的关系型数据不太适保存 这种类型的数据，Redis提供的数据结构可以相对比较容易地实现这些功能。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p>
<h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><p>用于数据量上亿的场景下，例如几亿用户系统的签到，去重登录次数统计，某用户是否在线状态等等。腾讯10亿用户，要几个毫秒内查询到某个用户是否在线，能怎么做？千万别说给每个用户建立一个key，然后挨个记（你可以算一下需要的内存会很恐怖，而且这种类似的需求很多。这里要用到位操作——使用setbit、getbit、bitcount命令。原理是：redis内构建一个足够长的数组，每个数组元素只能是0和1两个值，然后这个数组的下标index用来表示用户id（必须是数字哈），那么很显然，这个几亿长的大数组就能通过下标和元素值（0和1）来构建一个记忆系统。</p>
<h1 id="Redis-的持久化机制有哪些？优缺点说说"><a href="#Redis-的持久化机制有哪些？优缺点说说" class="headerlink" title="Redis 的持久化机制有哪些？优缺点说说"></a>Redis 的持久化机制有哪些？优缺点说说</h1><p>Redis是基于内存的非关系型K-V数据库，既然它是基于内存的，如果Redis服务器挂了，数据就会丢失。为了避免数据丢失了，Redis提供了<strong>持久化</strong>，即把数据保存到磁盘。</p>
<p>Redis提供了<strong>RDB和AOF</strong>两种持久化机制，它持久化文件加载流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="持久化文件加载流程图"></p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><strong>RDB</strong>，就是把内存数据以快照的形式保存到磁盘上。</p>
<blockquote>
<p>什么是快照?可以这样理解，给当前时刻的数据，拍一张照片，然后保存下来。</p>
</blockquote>
<p>RDB持久化，是指在指定的时间间隔内，执行指定次数的写操作，将内存中的数据集快照写入磁盘中，它是Redis默认的持久化方式。执行完操作后，在指定目录下会生成一个<code>dump.rdb</code>文件，Redis 重启的时候，通过加载<code>dump.rdb</code>文件来恢复数据。RDB触发机制主要有以下几种：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/13b64b5a5a914d41ba04a7ecd7245148tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p><strong>RDB 的优点</strong></p>
<ul>
<li>适合大规模的数据恢复场景，如备份，全量复制等</li>
</ul>
<p><strong>RDB缺点</strong></p>
<ul>
<li>没办法做到实时持久化/秒级持久化。</li>
<li>新老版本存在RDB格式兼容问题</li>
</ul>
<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p><strong>AOF（append only file）</strong> 持久化，采用日志的形式来记录每个写操作，追加到文件中，重启时再重新执行AOF文件中的命令来恢复数据。它主要解决数据持久化的实时性问题。默认是不开启的。</p>
<p>AOF的工作流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/AOF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="AOF的工作流程图"></p>
<p><strong>AOF的优点</strong></p>
<ul>
<li>数据的一致性和完整性更高</li>
</ul>
<p><strong>AOF的缺点</strong></p>
<ul>
<li>AOF记录的内容越多，文件越大，数据恢复变慢。</li>
</ul>
<h1 id="怎么实现Redis的高可用？"><a href="#怎么实现Redis的高可用？" class="headerlink" title="怎么实现Redis的高可用？"></a>怎么实现Redis的高可用？</h1><p>我们在项目中使用Redis，肯定不会是单点部署Redis服务的。因为，单点部署一旦宕机，就不可用了。为了实现高可用，通常的做法是，将数据库复制多个副本以部署在不同的服务器上，其中一台挂了也可以继续提供服务。 Redis 实现高可用有三种部署模式：<strong>主从模式，哨兵模式，集群模式</strong>。</p>
<h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p>主从模式中，Redis部署了多台机器，有主节点，负责读写操作，有从节点，只负责读操作。从节点的数据来自主节点，实现原理就是<strong>主从复制机制</strong></p>
<p>主从复制包括全量复制，增量复制两种。一般当slave第一次启动连接master，或者认为是第一次连接，就采用<strong>全量复制</strong>，全量复制流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="全量复制流程图"></p>
<p>1.slave发送sync命令到master。</p>
<p>2.master接收到SYNC命令后，执行bgsave命令，生成RDB全量文件。</p>
<p>3.master使用缓冲区，记录RDB快照生成期间的所有写命令。</p>
<p>4.master执行完bgsave后，向所有slave发送RDB快照文件。</p>
<p>5.slave收到RDB快照文件后，载入、解析收到的快照。</p>
<p>6.master使用缓冲区，记录RDB同步期间生成的所有写的命令。</p>
<p>7.master快照发送完毕后，开始向slave发送缓冲区中的写命令;</p>
<p>8.salve接受命令请求，并执行来自master缓冲区的写命令</p>
<p>redis2.8版本之后，已经使用<strong>psync来替代sync</strong>，因为sync命令非常消耗系统资源，psync的效率更高。</p>
<p>slave与master全量同步之后，master上的数据，如果再次发生更新，就会触发<strong>增量复制</strong>。</p>
<p>当master节点发生数据增减时，就会触发<code>replicationFeedSalves()</code>函数，接下来在 Master节点上调用的每一个命令会使用<code>replicationFeedSlaves()</code>来同步到Slave节点。执行此函数之前呢，master节点会判断用户执行的命令是否有数据更新，如果有数据更新的话，并且slave节点不为空，就会执行此函数。这个函数作用就是：<strong>把用户执行的命令发送到所有的slave节点</strong>，让slave节点执行。流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B5%81%E7%A8%8B.png" alt="流程"></p>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>主从模式中，一旦主节点由于故障不能提供服务，需要人工将从节点晋升为主节点，同时还要通知应用方更新主节点地址。显然，多数业务场景都不能接受这种故障处理方式。Redis从2.8开始正式提供了Redis Sentinel（哨兵）架构来解决这个问题。</p>
<p><strong>哨兵模式</strong>，由一个或多个Sentinel实例组成的Sentinel系统，它可以监视所有的Redis主节点和从节点，并在被监视的主节点进入下线状态时，<strong>自动将下线主服务器属下的某个从节点升级为新的主节点</strong>。但是呢，一个哨兵进程对Redis节点进行监控，就可能会出现问题（<strong>单点问题</strong>），因此，可以使用多个哨兵来进行监控Redis节点，并且各个哨兵之间还会进行监控。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F-16308532736712.png" alt="哨兵模式"></p>
<p>简单来说，哨兵模式就三个作用：</p>
<ul>
<li>发送命令，等待Redis服务器（包括主服务器和从服务器）返回监控其运行状态；</li>
<li>哨兵监测到主节点宕机，会自动将从节点切换成主节点，然后通过发布订阅模式通知其他的从节点，修改配置文件，让它们切换主机；</li>
<li>哨兵之间还会相互监控，从而达到高可用。</li>
</ul>
<p><strong>故障切换的过程是怎样的呢</strong></p>
<blockquote>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p>
</blockquote>
<p>哨兵的工作模式如下：</p>
<ol>
<li>每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他Sentinel实例发送一个 PING命令。</li>
<li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel标记为主观下线。</li>
<li>如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。</li>
<li>当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线。</li>
<li>在一般情况下， 每个 Sentinel 会以每10秒一次的频率向它已知的所有Master，Slave发送 INFO 命令。</li>
<li>当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次</li>
<li>若没有足够数量的 Sentinel同意Master已经下线， Master的客观下线状态就会被移除；若Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。</li>
</ol>
<h2 id="Cluster集群模式"><a href="#Cluster集群模式" class="headerlink" title="Cluster集群模式"></a>Cluster集群模式</h2><p>哨兵模式基于主从模式，实现读写分离，它还可以自动切换，系统可用性更高。但是它每个节点存储的数据是一样的，浪费内存，并且不好在线扩容。 因此，Cluster集群应运而生，它在Redis3.0加入的，实现了Redis的<strong>分布式存储</strong>。对数据进行分片，也就是说<strong>每台Redis节点上存储不同的内容</strong>，来解决在线扩容的问题。并且，它也提供复制和故障转移的功能。</p>
<h4 id="Cluster集群节点的通讯"><a href="#Cluster集群节点的通讯" class="headerlink" title="Cluster集群节点的通讯"></a>Cluster集群节点的通讯</h4><p>一个Redis集群由多个节点组成，<strong>各个节点之间是怎么通信的呢</strong>？通过<strong>Gossip协议</strong>！</p>
<p>Redis Cluster集群通过Gossip协议进行通信，节点之前不断交换信息，交换的信息内容包括节点出现故障、新节点加入、主从节点变更信息、slot信息等等。常用的Gossip消息分为4种，分别是：ping、pong、meet、fail。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/Cluster%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%9A%E8%AE%AF.png" alt="Cluster集群节点的通讯"></p>
<blockquote>
<ul>
<li>meet消息：通知新节点加入。消息发送者通知接收者加入到当前集群，meet消息通信正常完成后，接收节点会加入到集群中并进行周期性的ping、pong消息交换。</li>
<li>ping消息：集群内交换最频繁的消息，集群内每个节点每秒向多个其他节点发送ping消息，用于检测节点是否在线和交换彼此状态信息。</li>
<li>pong消息：当接收到ping、meet消息时，作为响应消息回复给发送方确认消息正常通信。pong消息内部封装了自身状态数据。节点也可以向集群内广播自身的pong消息来通知整个集群对自身状态进行更新。</li>
<li>fail消息：当节点判定集群内另一个节点下线时，会向集群内广播一个fail消息，其他节点接收到fail消息之后把对应节点更新为下线状态。</li>
</ul>
</blockquote>
<p>特别的，每个节点是通过<strong>集群总线(cluster bus)</strong> 与其他的节点进行通信的。通讯时，使用特殊的端口号，即对外服务端口号加10000。例如如果某个node的端口号是6379，那么它与其它nodes通信的端口号是 16379。nodes 之间的通信采用特殊的二进制协议。</p>
<h4 id="Hash-Slot插槽算法"><a href="#Hash-Slot插槽算法" class="headerlink" title="Hash Slot插槽算法"></a>Hash Slot插槽算法</h4><p>既然是分布式存储，Cluster集群使用的分布式算法是<strong>一致性Hash</strong>嘛？并不是，而是<strong>Hash Slot插槽算法</strong>。</p>
<p><strong>插槽算法</strong>把整个数据库被分为16384个slot（槽），每个进入Redis的键值对，根据key进行散列，分配到这16384插槽中的一个。使用的哈希映射也比较简单，用CRC16算法计算出一个16 位的值，再对16384取模。数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点都可以处理这16384个槽。</p>
<p>集群中的每个节点负责一部分的hash槽，比如当前集群有A、B、C个节点，每个节点上的哈希槽数 =16384/3，那么就有：</p>
<ul>
<li>节点A负责0~5460号哈希槽</li>
<li>节点B负责5461~10922号哈希槽</li>
<li>节点C负责10923~16383号哈希槽</li>
</ul>
<h4 id="Redis-Cluster集群"><a href="#Redis-Cluster集群" class="headerlink" title="Redis Cluster集群"></a>Redis Cluster集群</h4><p>Redis Cluster集群中，需要确保16384个槽对应的node都正常工作，如果某个node出现故障，它负责的slot也会失效，整个集群将不能工作。</p>
<p>因此为了保证高可用，Cluster集群引入了主从复制，一个主节点对应一个或者多个从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点宕机时，就会启用从节点。</p>
<p>在Redis的每一个节点上，都有两个玩意，一个是插槽（slot），它的取值范围是0<del>16383。另外一个是cluster，可以理解为一个集群管理的插件。当我们存取的key到达时，Redis 会根据CRC16算法得出一个16 bit的值，然后把结果对16384取模。酱紫每个key都会对应一个编号在 0</del>16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p>
<p>虽然数据是分开存储在不同节点上的，但是对客户端来说，整个集群Cluster，被看做一个整体。客户端端连接任意一个node，看起来跟操作单实例的Redis一样。当客户端操作的key没有被分配到正确的node节点时，Redis会返回转向指令，最后指向正确的node，这就有点像浏览器页面的302 重定向跳转。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis02.png" alt="redis02"></p>
<h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><p>Redis集群实现了高可用，当集群内节点出现故障时，通过<strong>故障转移</strong>，以保证集群正常对外提供服务。</p>
<p>redis集群通过ping/pong消息，实现故障发现。这个环境包括<strong>主观下线和客观下线</strong>。</p>
<p><strong>主观下线：</strong> 某个节点认为另一个节点不可用，即下线状态，这个状态并不是最终的故障判定，只能代表一个节点的意见，可能存在误判情况。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BB%E8%A7%82%E4%B8%8B%E7%BA%BF.png" alt="主观下线"></p>
<p><strong>客观下线：</strong> 指标记一个节点真正的下线，集群内多个节点都认为该节点不可用，从而达成共识的结果。如果是持有槽的主节点故障，需要为该节点进行故障转移。</p>
<ul>
<li>假如节点A标记节点B为主观下线，一段时间后，节点A通过消息把节点B的状态发到其它节点，当节点C接受到消息并解析出消息体时，如果发现节点B的pfail状态时，会触发客观下线流程；</li>
<li>当下线为主节点时，此时Redis Cluster集群为统计持有槽的主节点投票，看投票数是否达到一半，当下线报告统计数大于一半时，被标记为<strong>客观下线</strong>状态。</li>
</ul>
<p>流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%AE%A2%E8%A7%82%E4%B8%8B%E7%BA%BF.png" alt="客观下线"></p>
<p><strong>故障恢复</strong>：故障发现后，如果下线节点的是主节点，则需要在它的从节点中选一个替换它，以保证集群的高可用。流程如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D.png" alt="故障恢复"></p>
<ul>
<li>资格检查：检查从节点是否具备替换故障主节点的条件。</li>
<li>准备选举时间：资格检查通过后，更新触发故障选举时间。</li>
<li>发起选举：到了故障选举时间，进行选举。</li>
<li>选举投票：只有持有槽的<strong>主节点</strong>才有票，从节点收集到足够的选票（大于一半），触发<strong>替换主节点操作</strong></li>
</ul>
<h1 id="使用过Redis分布式锁嘛？有哪些注意点呢？"><a href="#使用过Redis分布式锁嘛？有哪些注意点呢？" class="headerlink" title="使用过Redis分布式锁嘛？有哪些注意点呢？"></a>使用过Redis分布式锁嘛？有哪些注意点呢？</h1><p><strong>分布式锁</strong>，是控制分布式系统不同进程共同访问共享资源的一种锁的实现。秒杀下单、抢红包等等业务场景，都需要用到分布式锁，我们项目中经常使用Redis作为分布式锁。</p>
<p>选了Redis分布式锁的几种实现方法，大家来讨论下，看有没有啥问题哈。</p>
<ul>
<li>命令setnx + expire分开写</li>
<li>setnx + value值是过期时间</li>
<li>set的扩展命令（set ex px nx）</li>
<li>set ex px nx + 校验唯一随机值,再删除</li>
</ul>
<h2 id="命令setnx-expire分开写"><a href="#命令setnx-expire分开写" class="headerlink" title="命令setnx + expire分开写"></a>命令setnx + expire分开写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.setnx(key,lock_value) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    expire（key，<span class="number">100</span>）; <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务请求</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果执行完<code>setnx</code>加锁，正要执行expire设置过期时间时，进程crash掉或者要重启维护了，那这个锁就“长生不老”了，<strong>别的线程永远获取不到锁</strong>啦，所以分布式锁<strong>不能</strong>这么实现。</p>
<h2 id="setnx-value值是过期时间"><a href="#setnx-value值是过期时间" class="headerlink" title="setnx + value值是过期时间"></a>setnx + value值是过期时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> expires = System.currentTimeMillis() + expireTime; <span class="comment">//系统时间+设置的过期时间</span></span><br><span class="line">String expiresStr = String.valueOf(expires);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line"><span class="keyword">if</span> (jedis.setnx(key, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 如果锁已经存在，获取锁的过期时间</span></span><br><span class="line">String currentValueStr = jedis.get(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果获取到的过期时间，小于系统当前时间，表示已经过期</span></span><br><span class="line"><span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）</span></span><br><span class="line">    String oldValueStr = jedis.getSet(key_resource_id, expiresStr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">         <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//其他情况，均返回加锁失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>笔者看过有开发小伙伴是这么实现分布式锁的，但是这种方案也有这些<strong>缺点</strong>：</p>
<ul>
<li>过期时间是客户端自己生成的，分布式环境下，每个客户端的时间必须同步。</li>
<li>没有保存持有者的唯一标识，可能被别的客户端释放/解锁。</li>
<li>锁过期的时候，并发多个客户端同时请求过来，都执行了<code>jedis.getSet()</code>，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间，可能被别的客户端覆盖。</li>
</ul>
<h2 id="set的扩展命令（set-ex-px-nx）（注意可能存在的问题）"><a href="#set的扩展命令（set-ex-px-nx）（注意可能存在的问题）" class="headerlink" title="set的扩展命令（set ex px nx）（注意可能存在的问题）"></a>set的扩展命令（set ex px nx）（注意可能存在的问题）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key, lock_value, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方案可能存在这样的问题：</p>
<ul>
<li>锁过期释放了，业务还没执行完。</li>
<li>锁被别的线程误删。</li>
</ul>
<h2 id="set-ex-px-nx-校验唯一随机值-再删除"><a href="#set-ex-px-nx-校验唯一随机值-再删除" class="headerlink" title="set ex px nx + 校验唯一随机值,再删除"></a>set ex px nx + 校验唯一随机值,再删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key, uni_request_id, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="comment">//判断是不是当前线程加的锁,是才释放</span></span><br><span class="line">       <span class="keyword">if</span> (uni_request_id.equals(jedis.get(key))) &#123;</span><br><span class="line">        jedis.del(key); <span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，判断当前线程加的锁和释放锁是不是一个原子操作。如果调用jedis.del()释放锁的时候，可能这把锁已经不属于当前客户端，<strong>会解除他人加的锁</strong>。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/image-20210905225505854.png" alt="image-20210905225505854"></p>
<p>一般也是用<strong>lua脚本</strong>代替。lua脚本如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then </span><br><span class="line">   return redis.call(&#x27;del&#x27;,KEYS[1]) </span><br><span class="line">else</span><br><span class="line">   return 0</span><br><span class="line">end;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>这种方式比较不错了，一般情况下，已经可以使用这种实现方式。但是存在<strong>锁过期释放了，业务还没执行完的问题</strong>（实际上，估算个业务处理的时间，一般没啥问题了）。</p>
<h1 id="使用过Redisson嘛？说说它的原理"><a href="#使用过Redisson嘛？说说它的原理" class="headerlink" title="使用过Redisson嘛？说说它的原理"></a>使用过Redisson嘛？说说它的原理</h1><p><strong>分布式锁</strong>可能存在<strong>锁过期释放，业务没执行完的问题</strong>。有些小伙伴认为，稍微把锁过期时间设置长一些就可以啦。其实我们设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。</p>
<p>当前<strong>开源框架Redisson</strong>就解决了这个分布式锁问题。我们一起来看下Redisson底层原理是怎样的吧：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/Redisson%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="Redisson底层原理图"></p>
<p>只要线程一加锁成功，就会启动一个<code>watch dog</code>看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，Redisson就是使用Redisson解决了<strong>锁过期释放，业务没执行完</strong>问题。</p>
<h1 id="什么是Redlock算法"><a href="#什么是Redlock算法" class="headerlink" title="什么是Redlock算法"></a>什么是Redlock算法</h1><p>Redis一般都是集群部署的，假设数据在主从同步过程，主节点挂了，Redis分布式锁可能会有<strong>哪些问题</strong>呢？一起来看些这个流程图：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis03.png"></p>
<p>如果线程一在Redis的master节点上拿到了锁，但是加锁的key还没同步到slave节点。恰好这时，master节点发生故障，一个slave节点就会升级为master节点。线程二就可以获取同个key的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p>
<p>为了解决这个问题，Redis作者 antirez提出一种高级的分布式锁算法：<strong>Redlock</strong>。Redlock核心思想是这样的：</p>
<blockquote>
<p>搞多个Redis master部署，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。</p>
</blockquote>
<p>我们假设当前有5个Redis master节点，在5台服务器上面运行这些Redis实例。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis04.png"></p>
<p>RedLock的实现步骤:如下</p>
<blockquote>
<ul>
<li>1.获取当前时间，以毫秒为单位。</li>
<li>2.按顺序向5个master节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为10秒，则超时时间一般在5-50毫秒之间,我们就假设超时时间是50ms吧）。如果超时，跳过该master节点，尽快去尝试下一个master节点。</li>
<li>3.客户端使用当前时间减去开始获取锁时间（即步骤1记录的时间），得到获取锁使用的时间。当且仅当超过一半（N/2+1，这里是5/2+1=3个节点）的Redis master节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图，10s&gt; 30ms+40ms+50ms+4m0s+50ms）</li>
<li>如果取到了锁，key的真正有效时间就变啦，需要减去获取锁所使用的时间。</li>
<li>如果获取锁失败（没有在至少N/2+1个master实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的master节点上解锁（即便有些master节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。</li>
</ul>
</blockquote>
<p>简化下步骤就是：</p>
<ul>
<li>按顺序向5个master节点请求加锁</li>
<li>根据设置的超时时间来判断，是不是要跳过该master节点。</li>
<li>如果大于等于三个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。</li>
<li>如果获取锁失败，解锁！</li>
</ul>
<h1 id="Redis的跳跃表"><a href="#Redis的跳跃表" class="headerlink" title="Redis的跳跃表"></a>Redis的跳跃表</h1><p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/Redis%E7%9A%84%E8%B7%B3%E8%B7%83%E8%A1%A8.png" alt="Redis的跳跃表"></p>
<p>跳跃表是有序集合zset的底层实现之一</p>
<p>跳跃表支持平均<strong>O（logN）</strong>,最坏 O（N）复杂度的节点查找，还可以通过顺序性操作批量处理节点。</p>
<p>跳跃表实现由<strong>zskiplist和zskiplistNode</strong>两个结构组成，其中zskiplist用于保存跳跃表信息（如表头节点、表尾节点、长度），而zskiplistNode则用于表示跳跃表节点。</p>
<p>跳跃表就是在链表的基础上，增加多级索引提升查找效率。</p>
<h1 id="MySQL与Redis-如何保证双写一致性"><a href="#MySQL与Redis-如何保证双写一致性" class="headerlink" title="MySQL与Redis 如何保证双写一致性"></a>MySQL与Redis 如何保证双写一致性</h1><ul>
<li>缓存延时双删</li>
<li>删除缓存重试机制</li>
<li>读取biglog异步删除缓存</li>
</ul>
<h2 id="延时双删？"><a href="#延时双删？" class="headerlink" title="延时双删？"></a>延时双删？</h2><p>什么是延时双删呢？流程图如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%BB%B6%E6%97%B6%E5%8F%8C%E5%88%A0.png" alt="延时双删"></p>
<ol>
<li>先删除缓存</li>
<li>再更新数据库</li>
<li>休眠一会（比如1秒），再次删除缓存。</li>
</ol>
<p>这个休眠一会，一般多久呢？都是1秒？</p>
<blockquote>
<p>这个休眠时间 =  读业务逻辑数据的耗时 + 几百毫秒。为了确保读请求结束，写请求可以删除读请求可能带来的缓存脏数据。</p>
</blockquote>
<p>这种方案还算可以，只有休眠那一会（比如就那1秒），可能有脏数据，一般业务也会接受的。但是如果<strong>第二次删除缓存失败</strong>呢？缓存和数据库的数据还是可能不一致，对吧？给Key设置一个自然的expire过期时间，让它自动过期怎样？那业务要接受过期时间内，数据的不一致咯？还是有其他更佳方案呢？</p>
<h2 id="删除缓存重试机制"><a href="#删除缓存重试机制" class="headerlink" title="删除缓存重试机制"></a>删除缓存重试机制</h2><p>因为延时双删可能会存在第二步的删除缓存失败，导致的数据不一致问题。可以使用这个方案优化：删除失败就多删除几次呀,保证删除缓存成功就可以了呀~ 所以可以引入删除缓存重试机制</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6.png" alt="删除缓存重试机制"></p>
<ol>
<li>写请求更新数据库</li>
<li>缓存因为某些原因，删除失败</li>
<li>把删除失败的key放到消息队列</li>
<li>消费消息队列的消息，获取要删除的key</li>
<li>重试删除缓存操作</li>
</ol>
<h2 id="读取biglog异步删除缓存"><a href="#读取biglog异步删除缓存" class="headerlink" title="读取biglog异步删除缓存"></a>读取biglog异步删除缓存</h2><p>重试删除缓存机制还可以吧，就是会造成好多<strong>业务代码入侵</strong>。其实，还可以这样优化：通过数据库的binlog来异步淘汰key。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis05.png"></p>
<p>以mysql为例吧</p>
<ul>
<li>可以使用阿里的canal将binlog日志采集发送到MQ队列里面</li>
<li>然后通过ACK机制确认处理这条更新消息，删除缓存，保证数据缓存一致性</li>
</ul>
<h1 id="为什么Redis-6-0-之后改多线程呢？"><a href="#为什么Redis-6-0-之后改多线程呢？" class="headerlink" title="为什么Redis 6.0 之后改多线程呢？"></a>为什么Redis 6.0 之后改多线程呢？</h1><ul>
<li>Redis6.0之前，Redis在处理客户端的请求时，包括读socket、解析、执行、写socket等都由一个顺序串行的主线程处理，这就是所谓的“单线程”。</li>
<li>Redis6.0之前为什么一直不使用多线程？使用Redis时，几乎不存在CPU成为瓶颈的情况， Redis主要受限于内存和网络。例如在一个普通的Linux系统上，Redis通过使用pipelining每秒可以处理100万个请求，所以如果应用程序主要使用O(N)或O(log(N))的命令，它几乎不会占用太多CPU。</li>
</ul>
<p>redis使用多线程并非是完全摒弃单线程，redis还是使用单线程模型来处理客户端的请求，只是使用多线程来处理数据的读写和协议解析，执行命令还是使用单线程。</p>
<p>这样做的目的是因为redis的性能瓶颈在于网络IO而非CPU，使用多线程能提升IO读写的效率，从而整体提高redis的性能。</p>
<h1 id="聊聊Redis-事务机制"><a href="#聊聊Redis-事务机制" class="headerlink" title="聊聊Redis 事务机制"></a>聊聊Redis 事务机制</h1><p>Redis通过<strong>MULTI、EXEC、WATCH</strong>等一组命令集合，来实现事务机制。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
<p>简言之，Redis事务就是<strong>顺序性、一次性、排他性</strong>的执行一个队列中的一系列命令。</p>
<p>Redis执行事务的流程如下：</p>
<ul>
<li>开始事务（MULTI）</li>
<li>命令入队</li>
<li>执行事务（EXEC）、撤销事务（DISCARD ）</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EXEC</td>
<td>执行所有事务块内的命令</td>
</tr>
<tr>
<td>DISCARD</td>
<td>取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td>MULTI</td>
<td>标记一个事务块的开始</td>
</tr>
<tr>
<td>UNWATCH</td>
<td>取消 WATCH 命令对所有 key 的监视。</td>
</tr>
<tr>
<td>WATCH</td>
<td>监视key ，如果在事务执行之前，该key 被其他命令所改动，那么事务将被打断。</td>
</tr>
</tbody></table>
<h1 id="Redis的Hash-冲突怎么办"><a href="#Redis的Hash-冲突怎么办" class="headerlink" title="Redis的Hash 冲突怎么办"></a>Redis的Hash 冲突怎么办</h1><p>Redis 作为一个K-V的内存数据库，它使用用一张全局的哈希来保存所有的键值对。这张哈希表，有多个哈希桶组成，哈希桶中的entry元素保存了<em>key和</em>value指针，其中<em>key指向了实际的键，</em>value指向了实际的值。</p>
<p>哈希表查找速率很快的，有点类似于Java中的HashMap，它让我们在O(1) 的时间复杂度快速找到键值对。首先通过key计算哈希值，找到对应的哈希桶位置，然后定位到entry，在entry找到对应的数据。</p>
<p><strong>什么是哈希冲突？</strong></p>
<blockquote>
<p>哈希冲突： 通过不同的key，计算出一样的哈希值，导致落在同一个哈希桶中。</p>
</blockquote>
<p>Redis为了解决哈希冲突，采用了<strong>链式哈希</strong>。链式哈希是指同一个哈希桶中，多个元素用一个链表来保存，它们之间依次用指针连接。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis06.png"></p>
<p>有些读者可能还会有疑问：哈希冲突链上的元素只能通过指针逐一查找再操作。当往哈希表插入数据很多，冲突也会越多，冲突链表就会越长，那查询效率就会降低了。</p>
<p>为了保持高效，Redis 会对<strong>哈希表做rehash</strong>操作，也就是增加哈希桶，减少冲突。为了rehash更高效，Redis还默认使用了两个全局哈希表，一个用于当前使用，称为主哈希表，<strong>一个用于扩容，称为备用哈希表</strong>。</p>
<h1 id="在生成-RDB期间，Redis-可以同时处理写请求么？"><a href="#在生成-RDB期间，Redis-可以同时处理写请求么？" class="headerlink" title="在生成 RDB期间，Redis 可以同时处理写请求么？"></a>在生成 RDB期间，Redis 可以同时处理写请求么？</h1><p><strong>可以的</strong>，Redis提供两个指令生成RDB，分别是<strong>save和bgsave</strong>。</p>
<ul>
<li>如果是save指令，会阻塞，因为是主线程执行的。</li>
<li>如果是bgsave指令，是fork一个子进程来写入RDB文件的，快照持久化完全交给子进程来处理，父进程则可以继续处理客户端的请求。</li>
</ul>
<h1 id="Redis底层，使用的什么协议"><a href="#Redis底层，使用的什么协议" class="headerlink" title="Redis底层，使用的什么协议?"></a>Redis底层，使用的什么协议?</h1><p>RESP，英文全称是Redis Serialization Protocol,它是专门为redis设计的一套序列化协议. 这个协议其实在redis的1.2版本时就已经出现了,但是到了redis2.0才最终成为redis通讯协议的标准。</p>
<p>RESP主要有<strong>实现简单、解析速度快、可读性好</strong>等优点。</p>
<h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><p>应对<strong>缓存穿透</strong>问题，我们可以使用<strong>布隆过滤器</strong>。布隆过滤器是什么呢？</p>
<p>布隆过滤器是一种占用空间很小的数据结构，它由一个很长的二进制向量和一组Hash映射函数组成，它用于检索一个元素是否在一个集合中，空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p>
<p><strong>布隆过滤器原理是？</strong> 假设我们有个集合A，A中有n个元素。利用<strong>k个哈希散列</strong>函数，将A中的每个元素<strong>映射</strong>到一个长度为a位的数组B中的不同位置上，这些位置上的二进制数均设置为1。如果待检查的元素，经过这k个哈希散列函数的映射后，发现其k个位置上的二进制数<strong>全部为1</strong>，这个元素很可能属于集合A，反之，<strong>一定不属于集合A</strong>。</p>
<p>来看个简单例子吧，假设集合A有3个元素，分别为{<strong>d1,d2,d3</strong>}。有1个哈希函数，为<strong>Hash1</strong>。现在将A的每个元素映射到长度为16位数组B。</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis11.png"></p>
<p>我们现在把d1映射过来，假设Hash1（d1）= 2，我们就把数组B中，下标为2的格子改成1，如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis12.png"></p>
<p>我们现在把<strong>d2</strong>也映射过来，假设Hash1（d2）= 5，我们把数组B中，下标为5的格子也改成1，如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis13.png"></p>
<p>接着我们把<strong>d3</strong>也映射过来，假设Hash1（d3）也等于 2，它也是把下标为2的格子标1：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis14.png"></p>
<p>因此，我们要确认一个元素dn是否在集合A里，我们只要算出Hash1（dn）得到的索引下标，只要是0，那就表示这个元素<strong>不在集合A</strong>，如果索引下标是1呢？那该元素<strong>可能</strong>是A中的某一个元素。因为你看，d1和d3得到的下标值，都可能是1，还可能是其他别的数映射的，布隆过滤器是存在这个<strong>缺点</strong>的：会存在<strong>hash碰撞</strong>导致的假阳性，判断存在误差。</p>
<p>如何<strong>减少这种误差</strong>呢？</p>
<ul>
<li>搞多几个哈希函数映射，降低哈希碰撞的概率</li>
<li>同时增加B数组的bit长度，可以增大hash函数生成的数据的范围，也可以降低哈希碰撞的概率</li>
</ul>
<p>我们又增加一个Hash2<strong>哈希映射</strong>函数，假设Hash2（d1）=6,Hash2（d3）=8,它俩不就不冲突了嘛，如下：</p>
<p><img src="/2021/09/05/%E8%AF%A6%E8%A7%A320%E9%81%93Redis%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/redis15.png"></p>
<p>即使存在误差，我们可以发现，布隆过滤器并<strong>没有存放完整的数据</strong>，它只是运用一系列哈希映射函数计算出位置，然后填充二进制向量。如果<strong>数量很大的话</strong>，布隆过滤器通过极少的错误率，换取了存储空间的极大节省，还是挺划算的。</p>
<p>目前布隆过滤器已经有相应实现的开源类库啦，如<strong>Google的Guava类库</strong>，Twitter的 Algebird 类库，信手拈来即可，或者基于Redis自带的Bitmaps自行实现设计也是可以的。</p>
<p>来源：<a href="https://juejin.cn/post/7002011542145204261">https://juejin.cn/post/7002011542145204261</a></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划详解</title>
    <url>/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们刷leetcode的时候，经常会遇到动态规划类型题目。动态规划问题非常非常经典，也很有技巧性，一般大厂都非常喜欢问。</p>
<ul>
<li>什么是动态规划？</li>
<li>动态规划的核心思想</li>
<li>一个例子走进动态规划</li>
<li>动态规划的解题套路</li>
<li>leetcode案例分析</li>
</ul>
<span id="more"></span>

<!-- more -->

<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3.png" alt="动态规划详解"></p>
<h1 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h1><p>动态规划（英语：Dynamic programming，简称 DP），是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。</p>
<blockquote>
<p>dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems.</p>
</blockquote>
<p>以上定义来自维基百科，看定义感觉还是有点抽象。简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决。然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。</p>
<blockquote>
<p>一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。</p>
</blockquote>
<h1 id="动态规划核心思想"><a href="#动态规划核心思想" class="headerlink" title="动态规划核心思想"></a>动态规划核心思想</h1><p>动态规划最核心的思想，就在于<strong>拆分子问题，记住过往，减少重复计算</strong>。</p>
<p>我们来看下，网上比较流行的一个例子：</p>
<blockquote>
<ul>
<li>A ： “1+1+1+1+1+1+1+1 =？”</li>
<li>A ： “上面等式的值是多少”</li>
<li>B ： 计算 “8”</li>
<li>A : 在上面等式的左边写上 “1+” 呢？</li>
<li>A : “此时等式的值为多少”</li>
<li>B : 很快得出答案 “9”</li>
<li>A : “你怎么这么快就知道答案了”</li>
<li>A : “只要在8的基础上加1就行了”</li>
<li>A : “所以你不用重新计算，因为你记住了第一个等式的值为8!动态规划算法也可以说是 ‘记住求过的解来节省时间’”</li>
</ul>
</blockquote>
<h1 id="一个例子带你走进动态规划-–-青蛙跳阶问题"><a href="#一个例子带你走进动态规划-–-青蛙跳阶问题" class="headerlink" title="一个例子带你走进动态规划 – 青蛙跳阶问题"></a>一个例子带你走进动态规划 – 青蛙跳阶问题</h1><h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><blockquote>
<p>leetcode原题：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p>
</blockquote>
<p>有些小伙伴第一次见这个题的时候，可能会有点蒙圈，不知道怎么解决。其实可以试想：</p>
<blockquote>
<ul>
<li>要想跳到第10级台阶，要么是先跳到第9级，然后再跳1级台阶上去;要么是先跳到第8级，然后一次迈2级台阶上去。</li>
<li>同理，要想跳到第9级台阶，要么是先跳到第8级，然后再跳1级台阶上去;要么是先跳到第7级，然后一次迈2级台阶上去。</li>
<li>要想跳到第8级台阶，要么是先跳到第7级，然后再跳1级台阶上去;要么是先跳到第6级，然后一次迈2级台阶上去。</li>
</ul>
</blockquote>
<p>假设跳到第n级台阶的跳数我们定义为f(n)，很显然就可以得出以下公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f（10） = f（9）+f(8)</span><br><span class="line">f (9)  = f(8) + f(7)</span><br><span class="line">f (8)  = f(7) + f(6)</span><br><span class="line">...</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">即通用公式为: f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure>

<p>那f(2) 或者 f(1) 等于多少呢？</p>
<ul>
<li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) = 2;</li>
<li>当只有1级台阶时，只有一种跳法，即f（1）= 1；</li>
</ul>
<p>因此可以用递归去解决这个问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去leetcode提交一下，发现有问题，超出时间限制了</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201.png"></p>
<p>为什么超时了呢？递归耗时在哪里呢？先画出<strong>递归树</strong>看看：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9202.png"></p>
<ul>
<li>要计算原问题 f(10)，就需要先计算出子问题 f(9) 和 f(8)</li>
<li>然后要计算 f(9)，又要先算出子问题 f(8) 和 f(7)，以此类推。</li>
<li>一直到 f(2) 和 f(1），递归树才终止。</li>
</ul>
<p>我们先来看看这个递归的时间复杂度吧：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">递归时间复杂度 = 解决一个子问题时间*子问题个数</span><br></pre></td></tr></table></figure>

<ul>
<li>一个子问题时间 = f（n-1）+f（n-2），也就是一个加法的操作，所以复杂度是 O(1)；</li>
<li>问题个数 = 递归树节点的总数，递归树的总节点 = 2^n-1，所以是复杂度O(2^n)。</li>
</ul>
<p>因此，青蛙跳阶，递归解法的时间复杂度 = O(1) * O(2^n) = O(2^n)，就是指数级别的，爆炸增长的，如果n比较大的话，超时很正常的了。</p>
<p>回过头来，你仔细观察这颗递归树，你会发现存在大量重复计算，比如f（8）被计算了两次，f（7）被重复计算了3次…所以这个递归算法低效的原因，就是<strong>存在大量的重复计算</strong>！</p>
<p>既然存在大量重复计算，那么我们可以先把计算好的答案存下来，即造一个备忘录，等到下次需要的话，先去备忘录查一下，如果有，就直接取就好了，备忘录没有才开始计算，那就可以省去重新重复计算的耗时啦！这就是带备忘录的解法。</p>
<h2 id="带备忘录的递归解法（自顶向下）"><a href="#带备忘录的递归解法（自顶向下）" class="headerlink" title="带备忘录的递归解法（自顶向下）"></a>带备忘录的递归解法（自顶向下）</h2><p>一般使用一个数组或者一个哈希map充当这个<strong>备忘录</strong>。</p>
<ul>
<li>第一步，f（10）= f(9) + f(8)，f(9) 和f（8）都需要计算出来，然后再加到备忘录中，如下：</li>
</ul>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9203.png"></p>
<ul>
<li>第二步， f(9) = f（8）+ f（7），f（8）= f（7）+ f(6), 因为 f(8) 已经在备忘录中啦，所以可以省掉，f(7),f（6）都需要计算出来，加到备忘录中~</li>
</ul>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9204.png"></p>
<ul>
<li>第三步， f(8) = f（7）+ f(6),发现f(8)，f(7),f（6）全部都在备忘录上了，所以都可以剪掉。</li>
</ul>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9205.png"></p>
<p>所以呢，用了备忘录递归算法，递归树变成光秃秃的树干咯，如下：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9206.png"></p>
<p>带<strong>备忘录</strong>的递归算法，子问题个数=树节点数=n，解决一个子问题还是O(1),所以带<strong>备忘录</strong>的递归算法的时间复杂度是O(n)。接下来呢，我们用带<strong>备忘录</strong>的递归算法去撸代码，解决这个青蛙跳阶问题的超时问题咯~，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    //使用哈希map，充当备忘录的作用</span><br><span class="line">    Map&lt;Integer, Integer&gt; tempMap = new HashMap();</span><br><span class="line">    public int numWays(int n) &#123;</span><br><span class="line">        // n = 0 也算1种</span><br><span class="line">        if (n == 0) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n &lt;= 2) &#123;</span><br><span class="line">            return n;</span><br><span class="line">        &#125;</span><br><span class="line">        //先判断有没计算过，即看看备忘录有没有</span><br><span class="line">        if (tempMap.containsKey(n)) &#123;</span><br><span class="line">            //备忘录有，即计算过，直接返回</span><br><span class="line">            return tempMap.get(n);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 备忘录没有，即没有计算过，执行递归计算,并且把结果保存到备忘录map中，对1000000007取余（这个是leetcode题目规定的）</span><br><span class="line">            tempMap.put(n, (numWays(n - 1) + numWays(n - 2)) % 1000000007);</span><br><span class="line">            return tempMap.get(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去leetcode提交一下，如图，稳了：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9207.png"></p>
<p>其实，还可以用动态规划解决这道题。</p>
<h2 id="自底向上的动态规划"><a href="#自底向上的动态规划" class="headerlink" title="自底向上的动态规划"></a>自底向上的动态规划</h2><p>动态规划跟带备忘录的递归解法基本思想是一致的，都是减少重复计算，时间复杂度也都是差不多。但是呢：</p>
<ul>
<li>带备忘录的递归，是从f(10)往f(1）方向延伸求解的，所以也称为<strong>自顶向下</strong>的解法。</li>
<li>动态规划从较小问题的解，由交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10）方向，往上推求解，所以称为<strong>自底向上</strong>的解法。</li>
</ul>
<p>动态规划有几个典型特征，<strong>最优子结构、状态转移方程、边界、重叠子问题</strong>。在青蛙跳阶问题中：</p>
<ul>
<li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li>
<li>f(n)= f（n-1）+f（n-2）就称为状态转移方程</li>
<li>f(1) = 1, f(2) = 2 就是边界啦</li>
<li>比如f(10)= f(9)+f(8),f(9) = f(8) + f(7) ,f(8)就是重叠子问题。</li>
</ul>
<p>我们来看下自底向上的解法，从f(1)往f(10）方向，想想是不是直接一个for循环就可以解决啦，如下：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9208.png"></p>
<p>带备忘录的递归解法，空间复杂度是O(n)，但是呢，仔细观察上图，可以发现，f（n）只依赖前面两个数，所以只需要两个变量a和b来存储，就可以满足需求了，因此空间复杂度是O(1)就可以啦</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9209.png" alt="动态规划09"></p>
<p>动态规划实现代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int numWays(int n) &#123;</span><br><span class="line">        if (n&lt;= 1) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n == 2) &#123;</span><br><span class="line">            return 2;</span><br><span class="line">        &#125;</span><br><span class="line">        int a = 1;</span><br><span class="line">        int b = 2;</span><br><span class="line">        int temp = 0;</span><br><span class="line">        for (int i = 3; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% 1000000007;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="动态规划的解题套路"><a href="#动态规划的解题套路" class="headerlink" title="动态规划的解题套路"></a>动态规划的解题套路</h1><h2 id="什么样的问题可以考虑使用动态规划解决呢？"><a href="#什么样的问题可以考虑使用动态规划解决呢？" class="headerlink" title="什么样的问题可以考虑使用动态规划解决呢？"></a>什么样的问题可以考虑使用动态规划解决呢？</h2><blockquote>
<p>如果一个问题，可以把所有可能的答案穷举出来，并且穷举出来后，发现存在重叠子问题，就可以考虑使用动态规划。</p>
</blockquote>
<p>比如一些求最值的场景，如<strong>最长递增子序列、最小编辑距离、背包问题、凑零钱问题</strong>等等，都是动态规划的经典应用场景。</p>
<h2 id="动态规划的解题思路"><a href="#动态规划的解题思路" class="headerlink" title="动态规划的解题思路"></a>动态规划的解题思路</h2><p>动态规划的核心思想就是<strong>拆分子问题，记住过往，减少重复计算。</strong> 并且动态规划一般都是自底向上的，因此到这里，基于<strong>青蛙跳阶</strong>问题，我总结了一下我做动态规划的思路：</p>
<ul>
<li>穷举分析</li>
<li>确定边界</li>
<li>找出规律，确定最优子结构</li>
<li>写出状态转移方程</li>
</ul>
<h3 id="1-穷举分析"><a href="#1-穷举分析" class="headerlink" title="1. 穷举分析"></a>1. 穷举分析</h3><ul>
<li>当台阶数是1的时候，有一种跳法，f（1） =1</li>
<li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) = 2;</li>
<li>当台阶是3级时，想跳到第3级台阶，要么是先跳到第2级，然后再跳1级台阶上去，要么是先跳到第 1级，然后一次迈 2 级台阶上去。所以f(3) = f(2) + f(1) =3</li>
<li>当台阶是4级时，想跳到第3级台阶，要么是先跳到第3级，然后再跳1级台阶上去，要么是先跳到第 2级，然后一次迈 2 级台阶上去。所以f(4) = f(3) + f(2) =5</li>
<li>当台阶是5级时……</li>
</ul>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9210.png"></p>
<h3 id="2-确定边界"><a href="#2-确定边界" class="headerlink" title="2. 确定边界"></a>2. 确定边界</h3><p>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） =1，f(2) = 2，当台阶n&gt;=3时，已经呈现出规律f(3) = f(2) + f(1) =3，因此f（1） =1，f(2) = 2就是青蛙跳阶的边界。</p>
<h3 id="3-找规律，确定最优子结构"><a href="#3-找规律，确定最优子结构" class="headerlink" title="3. 找规律，确定最优子结构"></a>3. 找规律，确定最优子结构</h3><p>n&gt;=3时，已经呈现出规律 f(n) = f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：</p>
<blockquote>
<p>一道动态规划问题，其实就是一个递推问题。假设当前决策结果是f(n),则最优子结构就是要让 f(n-k) 最优,最优子结构性质就是能让转移到n的状态是最优的,并且与后面的决策没有关系,即让后面的决策安心地使用前面的局部最优解的一种性质</p>
</blockquote>
<h3 id="4，-写出状态转移方程"><a href="#4，-写出状态转移方程" class="headerlink" title="4， 写出状态转移方程"></a>4， 写出状态转移方程</h3><p>通过前面3步，穷举分析，确定边界，最优子结构，我们就可以得出状态转移方程啦：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9211.png"></p>
<h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a>5. 代码实现</h3><p>我们实现代码的时候，一般注意从底往上遍历哈，然后关注下边界情况，空间复杂度，也就差不多啦。动态规划有个框架的，大家实现的时候，可以考虑适当参考一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[0][0][...] = 边界值</span><br><span class="line">for(状态1 ：所有状态1的值)&#123;</span><br><span class="line">    for(状态2 ：所有状态2的值)&#123;</span><br><span class="line">        for(...)&#123;</span><br><span class="line">          //状态转移方程</span><br><span class="line">          dp[状态1][状态2][...] = 求最值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="leetcode案例分析"><a href="#leetcode案例分析" class="headerlink" title="leetcode案例分析"></a>leetcode案例分析</h1><p>我们一起来分析一道经典leetcode题目吧</p>
<blockquote>
<p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>
</blockquote>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure>

<p>我们按照以上动态规划的解题思路，</p>
<ul>
<li>穷举分析</li>
<li>确定边界</li>
<li>找规律，确定最优子结构</li>
<li>状态转移方程</li>
</ul>
<h2 id="1-穷举分析-1"><a href="#1-穷举分析-1" class="headerlink" title="1.穷举分析"></a>1.穷举分析</h2><p>因为动态规划，核心思想包括<strong>拆分子问题，记住过往，减少重复计算。</strong> 所以我们在思考原问题：<strong>数组num[i]的最长递增子序列长度时</strong>，可以思考下<strong>相关子问题</strong>，比如原问题是否跟<strong>子问题</strong>num[i-1]的最长递增子序列长度有关呢？</p>
<h3 id="自顶向上的穷举"><a href="#自顶向上的穷举" class="headerlink" title="自顶向上的穷举"></a>自顶向上的穷举</h3><p>这里观察规律，显然是有关系的，我们还是遵循动态规划<strong>自底向上</strong>的原则，基于示例1的数据，从数组只有一个元素开始分析。</p>
<ul>
<li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li>
<li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li>
<li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li>
<li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li>
<li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li>
<li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li>
<li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li>
<li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li>
<li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li>
</ul>
<h3 id="分析找规律，拆分子问题"><a href="#分析找规律，拆分子问题" class="headerlink" title="分析找规律，拆分子问题"></a>分析找规律，拆分子问题</h3><p>通过上面分析，我们可以<strong>发现一个规律</strong>：</p>
<p>如果新加入一个元素nums[i], 最长递增子序列要么<strong>是以nums[i]结尾的递增子序列</strong>，要么就是<strong>nums[i-1]的最长递增子序列</strong>。看到这个，是不是很开心，nums[i]的最长递增子序列已经跟<strong>子问题</strong> nums[i-1]的最长递增子序列有关联了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原问题数组nums[i]的最长递增子序列 = 子问题数组nums[i-1]的最长递增子序列/nums[i]结尾的最长递增子序列</span><br></pre></td></tr></table></figure>

<p>是不是感觉成功了一半呢？但是<strong>如何把nums[i]结尾的递增子序列也转化为对应的子问题</strong>呢？要是nums[i]结尾的递增子序列也跟nums[i-1]的最长递增子序列有关就好了。又或者nums[i]结尾的最长递增子序列，跟前面子问题num[j]（0=&lt;j&lt;i）结尾的最长递增子序列有关就好了，带着这个想法，我们又回头看看穷举的过程：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9212.png"></p>
<p>nums[i]的最长递增子序列，不就是<strong>从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）那个嘛</strong>，所以原问题，我们转化成求出以数组nums每个元素结尾的最长子序列集合，再取<strong>最大值</strong>嘛。哈哈，想到这，我们就可以<strong>用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</strong>啦，然后再来看看其中的规律：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9213.png"></p>
<p>其实，<strong>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i]</strong> 就可以啦。显然，可能形成多种新的子序列，我们选最长那个，就是dp[i]的值啦</p>
<blockquote>
<ul>
<li>nums[3]=5,以<code>5</code>结尾的最长子序列就是<code>[2,5]</code>,因为从数组下标<code>0到3</code>遍历，只找到了子序列<code>[2]</code>比<code>5</code>小，所以就是<code>[2]+[5]</code>啦，即<code>dp[4]=2</code></li>
<li>nums[4]=3,以<code>3</code>结尾的最长子序列就是<code>[2,3]</code>,因为从数组下标<code>0到4</code>遍历，只找到了子序列<code>[2]</code>比<code>3</code>小，所以就是<code>[2]+[3]</code>啦，即<code>dp[4]=2</code></li>
<li>nums[5]=7，以<code>7</code>结尾的最长子序列就是<code>[2,5,7]</code>和<code>[2,3,7]</code>,因为从数组下标<code>0到5</code>遍历，找到<code>2,5和3</code>都比7小，所以就有<code>[2,7],[5,7],[3,7],[2,5,7]和[2,3,7]</code>这些子序列，最长子序列就是<code>[2,5,7]和[2,3,7]</code>，它俩不就是以<code>5</code>结尾和<code>3</code>结尾的最长递增子序列+[7]来的嘛！所以，**<code>dp[5]=3 =dp[3]+1=dp[4]+1</code>**。</li>
</ul>
</blockquote>
<p>很显然有这个规律：一个以nums[i]结尾的数组nums</p>
<ul>
<li>如果存在j属于区间[0，i-1],并且num[i]&gt;num[j]的话，则有，dp(i) =max(dp(j))+1，</li>
</ul>
<h3 id="最简单的边界情况"><a href="#最简单的边界情况" class="headerlink" title="最简单的边界情况"></a>最简单的边界情况</h3><p>当nums数组只有一个元素时，最长递增子序列的长度dp(1)=1,当nums数组有两个元素时，dp(2) =2或者1， 因此边界就是dp(1)=1。</p>
<h3 id="确定最优子结构"><a href="#确定最优子结构" class="headerlink" title="确定最优子结构"></a>确定最优子结构</h3><p>从穷举分析，我们可以得出，以下的最优结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+1，存在j属于区间[0，i-1],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure>

<p><strong>max(dp(j))</strong> 就是最优子结构。</p>
<h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>通过前面分析，我们就可以得出状态转移方程啦：</p>
<p><img src="/2021/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9214.png"></p>
<p>所以数组num[i]的最长递增子序列就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxans = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring之ApplicationListener的使用</title>
    <url>/2021/08/29/Spring%E4%B9%8BApplicationListener%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Spring-ApplicationListener的使用"><a href="#Spring-ApplicationListener的使用" class="headerlink" title="Spring ApplicationListener的使用"></a><strong>Spring ApplicationListener的使用</strong></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Spring ApplicationListener 是Spring事件机制的一部分,与ApplicationEvent抽象类结合完成ApplicationContext的事件通知机制.</p>
<h2 id="ContextRefreshedEvent事件监听"><a href="#ContextRefreshedEvent事件监听" class="headerlink" title="ContextRefreshedEvent事件监听"></a>ContextRefreshedEvent事件监听</h2><p>以Spring的内置事件ContextRefreshedEvent为例,当ApplicationContext被初始化或刷新时，会触发ContextRefreshedEvent事件.如下代码示例:</p>
<span id="more"></span>

<!--more-->

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取所有的bean</span></span><br><span class="line">      String[] definitionNames = event.getApplicationContext().getBeanDefinitionNames();</span><br><span class="line">      <span class="keyword">for</span> (String name : definitionNames) &#123;</span><br><span class="line">         <span class="comment">//打印名称</span></span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承ApplicationEvent 抽象类就可以自定义事件模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, Long id, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get set 方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现ApplicationListener接口</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到事件: &quot;</span>+event.getId()+<span class="string">&quot;\t&quot;</span>+event.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListenner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyEvent myEvent = <span class="keyword">new</span> MyEvent(<span class="string">&quot;myEvent&quot;</span>, <span class="number">9527L</span>, <span class="string">&quot;十二点了 该吃饭了~&quot;</span>);</span><br><span class="line">        applicationContext.publishEvent(myEvent);</span><br><span class="line">      <span class="comment">//  System.out.println(&quot;发送结束&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来源：<a href="https://juejin.cn/post/6844904185188581390">https://juejin.cn/post/6844904185188581390</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring之@ControllerAdvice与统一异常处理</title>
    <url>/2021/08/29/Spring%E4%B9%8B-ControllerAdvice%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a><strong>@ControllerAdvice</strong></h1><p>Spring源码中有关<code>@ControllerAdvice</code>的注解如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ExceptionHandler</span><br><span class="line">@InitBinder</span><br><span class="line">@ModelAttribute</span><br></pre></td></tr></table></figure>

<p>理解：</p>
<p><code>@ControllerAdvice</code>是一个特殊的<code>@Component</code>，用于标识一个类，这个类中被以下三种注解标识的方法：<code>@ExceptionHandler</code>，<code>@InitBinder</code>，<code>@ModelAttribute</code>，将作用于所有的<code>@Controller</code>类的接口上。</p>
<p>那么，这个三个注解分别是什么意思，起到什么作用呢？</p>
<span id="more"></span>

<!--more-->

<h1 id="Initbinder"><a href="#Initbinder" class="headerlink" title="@Initbinder"></a><strong>@Initbinder</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Annotation that identifies methods which initialize the &#123;@link org.springframework.web.bind.WebDataBinder&#125; which will be used for populating command and form object arguments of annotated handler methods.</span><br><span class="line">Such init-binder methods support all arguments that &#123;@link RequestMapping&#125; supports, except for command/form objects and corresponding validation result objects. Init-binder methods must not have a return value; they are usually declared as &#123;@code void&#125;.</span><br></pre></td></tr></table></figure>

<p>作用：注册属性编辑器，对HTTP请求参数进行处理，再绑定到对应的接口，比如格式化的时间转换等。应用于单个@Controller类的方法上时，仅对该类里的接口有效。与@ControllerAdvice组合使用可全局生效。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a><strong>@ExceptionHandler</strong></h1><p>作用：统一异常处理，也可以指定要处理的异常类型</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">handleException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, ex.toString());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a><strong>@ModelAttribute</strong></h1><p>作用：绑定数据</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;zfh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在接口中获取前面绑定的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">index</span><span class="params">(<span class="meta">@ModelAttribute(&quot;user&quot;)</span> String user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.datetime.DateFormatter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zfh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/1/4 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMyBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加对日期的统一处理</span></span><br><span class="line">        <span class="comment">//binder.addCustomFormatter(new DateFormatter(&quot;yyyy-MM-dd&quot;));</span></span><br><span class="line">        binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加表单验证</span></span><br><span class="line">        <span class="comment">//binder.addValidators();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMyAttribute</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;zfh&quot;</span>); <span class="comment">// 在@RequestMapping的接口中使用@ModelAttribute(&quot;name&quot;) Object name获取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// 如果使用了@RestControllerAdvice，这里就不需要@ResponseBody了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">handler</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;统一异常处理&quot;</span>, ex);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;testAdvice&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">testAdvice</span><span class="params">(<span class="meta">@ModelAttribute(&quot;user&quot;)</span> String user, Date date)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user: &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;date: &quot;</span> + date);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;直接抛出异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="格式化时间转Date"><a href="#格式化时间转Date" class="headerlink" title="格式化时间转Date"></a><strong>格式化时间转Date</strong></h1><p>使用<code>@ControllerAdvice</code> + <code>@InitBinder</code>，可将http请求参数中的时间自动转换成Date类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">	GenericConversionService genericConversionService = (GenericConversionService) binder.getConversionService();</span><br><span class="line">	<span class="keyword">if</span> (genericConversionService != <span class="keyword">null</span>) &#123;</span><br><span class="line">genericConversionService.addConverter(<span class="keyword">new</span> DateConverter());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的时间类型转换器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期转换类</span></span><br><span class="line"><span class="comment"> * 将标准日期、标准日期时间、时间戳转换成Date类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dateFormat = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String shortDateFormat = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String timeStampFormat = <span class="string">&quot;^\\d+$&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        value = value.trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value.contains(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">                SimpleDateFormat formatter;</span><br><span class="line">                <span class="keyword">if</span> (value.contains(<span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">                    formatter = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    formatter = <span class="keyword">new</span> SimpleDateFormat(shortDateFormat);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> formatter.parse(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.matches(timeStampFormat)) &#123;</span><br><span class="line">                Long lDate = <span class="keyword">new</span> Long(value);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Date(lDate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;parser %s to Date fail&quot;</span>, value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;parser %s to Date fail&quot;</span>, value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@RestControllerAdvice = @ControllerAdvice + @ResponseBody</strong></p>
<p>来源：<a href="https://juejin.cn/post/6844903826412011533">https://juejin.cn/post/6844903826412011533</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>如果要存ip地址，用什么数据类型比较好</title>
    <url>/2021/08/22/%E5%A6%82%E6%9E%9C%E8%A6%81%E5%AD%98ip%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E5%A5%BD/</url>
    <content><![CDATA[<p>​        在看高性能MySQL第3版（4.1.7节）时，建议当存储IPv4地址时，应该使用32位的无符号整数（UNSIGNED INT）来存储IP地址，而不是使用字符串。但是没有给出具体原因。为了搞清楚这个原因，查了一些资料，记录下来。</p>
<span id="more"></span>
<!-- more -->

<p>相对字符串存储，使用无符号整数来存储有如下的好处：</p>
<ul>
<li>节省空间，不管是数据存储空间，还是索引存储空间</li>
<li>便于使用范围查询（BETWEEN…AND），且效率更高</li>
</ul>
<p>​        通常，在保存IPv4地址时，一个IPv4最小需要7个字符，最大需要15个字符，所以，使用VARCHAR(15)即可。MySQL在保存变长的字符串时，还需要额外的一个字节来保存此字符串的长度。而如果使用无符号整数来存储，只需要4个字节即可。另外还可以使用4个字段分别存储IPv4中的各部分，但是通常这不管是存储空间和查询效率应该都不是很高（可能有的场景适合使用这种方式存储）。</p>
<p>使用无符号整数来存储也有缺点：</p>
<ul>
<li>不便于阅读</li>
<li>需要手动转换</li>
</ul>
<p>​        对于转换来说，MySQL提供了相应的函数来把字符串格式的IP转换成整数INET_ATON，以及把整数格式的IP转换成字符串的INET_NTOA。如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select inet_aton(<span class="string">&#x27;192.168.0.1&#x27;</span>);</span></span><br><span class="line">+--------------------------+</span><br><span class="line">| inet_aton(&#x27;192.168.0.1&#x27;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|               3232235521 |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select inet_ntoa(3232235521);</span></span><br><span class="line">+-----------------------+</span><br><span class="line">| inet_ntoa(3232235521) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 192.168.0.1           |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>对于IPv6来说，使用VARBINARY同样可获得相同的好处，同时MySQL也提供了相应的转换函数，即INET6_ATON和INET6_NTOA。</p>
<p>对于转换字符串IPv4和数值类型，可以放在应用层，下面是使用java代码来对二者转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hub;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hub</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/8/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpLongUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把字符串IP转换成long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipStr 字符串IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IP对应的long值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ip2Long</span><span class="params">(String ipStr)</span> </span>&#123;</span><br><span class="line">        String[] ip = ipStr.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Long.valueOf(ip[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) + (Long.valueOf(ip[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                + (Long.valueOf(ip[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + Long.valueOf(ip[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把IP的long值转换成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipLong IP的long值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long值对应的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">long2Ip</span><span class="params">(<span class="keyword">long</span> ipLong)</span> </span>&#123;</span><br><span class="line">        StringBuilder ip = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ip.append(ipLong &gt;&gt;&gt; <span class="number">24</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append(ipLong &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">return</span> ip.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ip2Long(<span class="string">&quot;192.168.0.1&quot;</span>));</span><br><span class="line">        System.out.println(long2Ip(<span class="number">3232235521L</span>));</span><br><span class="line">        System.out.println(ip2Long(<span class="string">&quot;10.0.0.1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3232235521</span><br><span class="line">192.168.0.1</span><br><span class="line">167772161</span><br></pre></td></tr></table></figure>

<p>来源：blog.csdn.net/mhmyqn/article/details/48653157</p>
]]></content>
      <tags>
        <tag>ip</tag>
        <tag>mysql</tag>
        <tag>数据存储</tag>
      </tags>
  </entry>
  <entry>
    <title>idea本地测试(DeBug)远程代码</title>
    <url>/2021/08/10/idea%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95(DeBug)%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际开发工作中，不免会出现开发错误导致部署远程（如预发环境）的代码出现问题，但又不清楚本地是哪个地方的代码出现问题导致的错误，查看错误日志又不能实时的观测到这条业务的代码流程，于是采用本地测试debug远程代码。这里简单记录下此过程。</p>
<span id="more"></span>
<!-- more -->
<h1 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h1><ol>
<li><strong>Edit Configurations</strong> -&gt;  <strong>Add New Configuration</strong> -&gt; <strong>Remote</strong><br>填写服务器ip和端口号。</li>
<li>编辑Remote配置，Host填写远程项目启动的IP地址，Port为端口号。</li>
<li>将Command line arguments for remote JVM:中的内容拷贝下来，在接下来重启远程环境项目的过程中使用。然后保存配置。<br><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5432</code></li>
</ol>
<p><img src="/2021/08/10/idea%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95(DeBug)%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81/mmexport1628612316746.jpg" alt="编辑Remote配置"><br>4. 然后就可以在本地打断点，远程操作业务进行测试</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList源码分析</title>
    <url>/2021/08/07/%E6%AD%BB%E7%A3%95Java%E9%9B%86%E5%90%88--ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    ArrayList是一种以数组实现的List，与数组所不同的是，它具有动态扩容的能力，因此也称动态数组为。</p>
<span id="more"></span>


<h1 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h1><!-- more -->
<img src="/2021/08/07/%E6%AD%BB%E7%A3%95Java%E9%9B%86%E5%90%88--ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Image.png" alt="ArrayList继承关系图">



<ol>
<li>ArrayList实现了Cleanable、RandomAccess、List、Serializable等接口；</li>
<li>Cloneable—-可以被克隆；</li>
<li>RandomAccess—-可以被随机访问；</li>
<li>List—-提供基础的添加、删除遍历等操作；</li>
<li>Serializable—-提供可序列化。</li>
</ol>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><img src="/2021/08/07/%E6%AD%BB%E7%A3%95Java%E9%9B%86%E5%90%88--ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Image-16283509956251.png" alt="Image" style="zoom:50%;">

<ol>
<li>DEFAULT_CAPACITY<br>默认容量是10，也就是new ArrayList()创建时的默认容量。</li>
<li>EMPTY_ELEMENTDATA<br>空数组，这是用new ArrayList(0)创建时用的数组。</li>
<li>DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>空数组，这是用new ArrayList()创建时用的数组，它与EMPTY_ELEMENTDATA的区别是添加第一个元素时使这个空数组初始化为DEFAULT_CAPACITY(10)个元素。</li>
<li>elementData<br>真正存放元素的地方，用transient是为了不序列化这个字段。<p style="color:red">为什么不用private来修饰呢？（官方解释为了简化嵌套类的访问）
——但内部类或者嵌套类都可以访问私有成员</p></li>
<li>size<br>真整存放元素的个数，而不是elementData数组的长度。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
</search>
